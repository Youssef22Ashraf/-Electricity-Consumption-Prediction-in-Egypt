{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3684057,"sourceType":"datasetVersion","datasetId":4021}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/abdelrhmansalah1/smart-meters-pp-aff4dc?scriptVersionId=177903887\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-16T01:04:20.103271Z","iopub.execute_input":"2024-05-16T01:04:20.103669Z","iopub.status.idle":"2024-05-16T01:04:20.72114Z","shell.execute_reply.started":"2024-05-16T01:04:20.103638Z","shell.execute_reply":"2024-05-16T01:04:20.720308Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/smart-meters-in-london/darksky_parameters_documentation.html\n/kaggle/input/smart-meters-in-london/weather_hourly_darksky.csv\n/kaggle/input/smart-meters-in-london/acorn_details.csv\n/kaggle/input/smart-meters-in-london/uk_bank_holidays.csv\n/kaggle/input/smart-meters-in-london/weather_daily_darksky.csv\n/kaggle/input/smart-meters-in-london/daily_dataset.csv\n/kaggle/input/smart-meters-in-london/informations_households.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_97.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_27.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_55.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_0.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_2.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_9.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_34.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_60.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_7.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_43.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_99.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_87.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_89.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_47.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_106.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_92.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_54.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_8.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_28.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_107.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_57.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_82.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_78.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_31.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_52.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_21.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_53.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_41.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_93.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_18.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_77.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_66.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_73.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_33.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_37.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_26.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_20.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_46.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_58.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_110.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_13.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_22.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_1.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_72.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_96.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_76.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_95.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_68.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_29.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_81.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_45.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_24.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_80.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_74.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_6.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_70.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_17.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_84.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_98.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_104.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_90.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_102.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_11.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_75.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_49.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_32.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_101.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_50.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_48.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_61.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_79.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_10.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_65.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_40.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_35.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_94.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_109.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_85.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_86.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_23.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_69.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_51.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_36.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_88.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_15.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_44.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_67.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_83.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_42.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_5.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_91.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_59.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_38.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_100.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_105.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_30.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_63.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_108.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_25.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_3.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_103.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_16.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_39.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_71.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_56.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_64.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_14.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_111.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_19.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_12.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_4.csv\n/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset/block_62.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_97.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_27.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_55.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_0.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_2.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_9.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_34.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_60.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_7.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_43.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_99.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_87.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_89.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_47.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_106.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_92.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_54.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_8.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_28.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_107.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_57.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_82.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_78.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_31.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_52.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_21.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_53.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_41.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_93.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_18.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_77.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_66.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_73.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_33.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_37.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_26.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_20.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_46.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_58.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_110.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_13.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_22.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_1.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_72.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_96.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_76.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_95.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_68.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_29.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_81.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_45.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_24.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_80.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_74.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_6.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_70.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_17.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_84.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_98.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_104.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_90.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_102.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_11.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_75.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_49.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_32.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_101.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_50.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_48.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_61.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_79.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_10.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_65.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_40.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_35.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_94.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_109.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_85.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_86.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_23.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_69.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_51.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_36.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_88.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_15.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_44.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_67.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_83.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_42.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_5.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_91.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_59.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_38.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_100.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_105.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_30.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_63.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_108.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_25.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_3.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_103.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_16.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_39.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_71.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_56.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_64.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_14.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_111.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_19.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_12.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_4.csv\n/kaggle/input/smart-meters-in-london/halfhourly_dataset/halfhourly_dataset/block_62.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_97.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_27.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_55.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_0.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_2.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_9.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_34.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_60.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_7.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_43.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_99.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_87.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_89.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_47.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_106.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_92.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_54.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_8.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_28.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_107.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_57.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_82.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_78.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_31.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_52.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_21.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_53.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_41.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_93.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_18.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_77.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_66.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_73.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_33.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_37.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_26.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_20.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_46.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_58.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_110.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_13.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_22.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_1.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_72.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_96.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_76.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_95.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_68.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_29.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_81.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_45.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_24.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_80.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_74.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_6.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_70.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_17.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_84.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_98.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_104.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_90.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_102.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_11.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_75.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_49.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_32.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_101.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_50.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_48.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_61.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_79.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_10.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_65.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_40.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_35.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_94.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_109.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_85.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_86.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_23.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_69.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_51.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_36.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_88.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_15.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_44.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_67.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_83.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_42.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_5.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_91.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_59.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_38.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_100.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_105.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_30.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_63.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_108.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_25.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_3.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_103.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_16.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_39.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_71.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_56.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_64.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_14.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_111.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_19.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_12.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_4.csv\n/kaggle/input/smart-meters-in-london/daily_dataset/daily_dataset/block_62.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n# Try reading the CSV file with different encodings\nencodings_to_try = ['utf-8', 'iso-8859-1', 'cp1252']\n\nfor encoding in encodings_to_try:\n    try:\n        acorn_details_df = pd.read_csv(\"/kaggle/input/smart-meters-in-london/acorn_details.csv\", encoding=encoding)\n        print(f\"Successfully read the file using encoding: {encoding}\")\n        break\n    except UnicodeDecodeError:\n        print(f\"Failed to read the file using encoding: {encoding}\")\n\n# If none of the encodings work, you may need to investigate the file further or consult its documentation.\n","metadata":{"execution":{"iopub.status.busy":"2024-05-10T16:44:31.935139Z","iopub.execute_input":"2024-05-10T16:44:31.935652Z","iopub.status.idle":"2024-05-10T16:44:31.961478Z","shell.execute_reply.started":"2024-05-10T16:44:31.935621Z","shell.execute_reply":"2024-05-10T16:44:31.96037Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"acorn_details_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-10T16:44:31.963239Z","iopub.execute_input":"2024-05-10T16:44:31.964021Z","iopub.status.idle":"2024-05-10T16:44:32.007521Z","shell.execute_reply.started":"2024-05-10T16:44:31.963989Z","shell.execute_reply":"2024-05-10T16:44:32.006613Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"acorn_details_df.sample(15)","metadata":{"execution":{"iopub.status.busy":"2024-05-10T16:44:32.008688Z","iopub.execute_input":"2024-05-10T16:44:32.009166Z","iopub.status.idle":"2024-05-10T16:44:32.072898Z","shell.execute_reply.started":"2024-05-10T16:44:32.009138Z","shell.execute_reply":"2024-05-10T16:44:32.072141Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"acorn_details_df[\"CATEGORIES\"].unique()","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:19:26.030886Z","iopub.execute_input":"2024-05-10T17:19:26.031352Z","iopub.status.idle":"2024-05-10T17:19:26.044613Z","shell.execute_reply.started":"2024-05-10T17:19:26.031301Z","shell.execute_reply":"2024-05-10T17:19:26.043532Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"acorn_details_df[\"MAIN CATEGORIES\"].unique()","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:19:29.131192Z","iopub.execute_input":"2024-05-10T17:19:29.132008Z","iopub.status.idle":"2024-05-10T17:19:29.139401Z","shell.execute_reply.started":"2024-05-10T17:19:29.131961Z","shell.execute_reply":"2024-05-10T17:19:29.138227Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"acorn_details_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:19:32.549227Z","iopub.execute_input":"2024-05-10T17:19:32.55022Z","iopub.status.idle":"2024-05-10T17:19:32.556329Z","shell.execute_reply.started":"2024-05-10T17:19:32.550185Z","shell.execute_reply":"2024-05-10T17:19:32.555367Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n# Try reading the CSV file with different encodings\nencodings_to_try = ['utf-8', 'iso-8859-1', 'cp1252']\n\nfor encoding in encodings_to_try:\n    try:\n        daily_df = pd.read_csv(\"/kaggle/input/smart-meters-in-london/daily_dataset.csv\", encoding=encoding)\n        print(f\"Successfully read the file using encoding: {encoding}\")\n        break\n    except UnicodeDecodeError:\n        print(f\"Failed to read the file using encoding: {encoding}\")\n\n# If none of the encodings work, you may need to investigate the file further or consult its documentation.\n","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:19:33.43113Z","iopub.execute_input":"2024-05-10T17:19:33.431506Z","iopub.status.idle":"2024-05-10T17:19:40.643874Z","shell.execute_reply.started":"2024-05-10T17:19:33.431479Z","shell.execute_reply":"2024-05-10T17:19:40.642822Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"daily_df.sample(15)","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:19:43.173367Z","iopub.execute_input":"2024-05-10T17:19:43.173752Z","iopub.status.idle":"2024-05-10T17:19:43.34015Z","shell.execute_reply.started":"2024-05-10T17:19:43.173723Z","shell.execute_reply":"2024-05-10T17:19:43.339361Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"daily_df.loc[daily_df[\"LCLid\"] == \"MAC004663\"]","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:19:46.455727Z","iopub.execute_input":"2024-05-10T17:19:46.456475Z","iopub.status.idle":"2024-05-10T17:19:46.748716Z","shell.execute_reply.started":"2024-05-10T17:19:46.456443Z","shell.execute_reply":"2024-05-10T17:19:46.747747Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"daily_df[\"LCLid\"].shape","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:19:49.168592Z","iopub.execute_input":"2024-05-10T17:19:49.16896Z","iopub.status.idle":"2024-05-10T17:19:49.175242Z","shell.execute_reply.started":"2024-05-10T17:19:49.168934Z","shell.execute_reply":"2024-05-10T17:19:49.174149Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n# Try reading the CSV file with different encodings\nencodings_to_try = ['utf-8', 'iso-8859-1', 'cp1252']\n\nfor encoding in encodings_to_try:\n    try:\n        informations_households_df = pd.read_csv(\"/kaggle/input/smart-meters-in-london/informations_households.csv\", encoding=encoding)\n        print(f\"Successfully read the file using encoding: {encoding}\")\n        break\n    except UnicodeDecodeError:\n        print(f\"Failed to read the file using encoding: {encoding}\")\n\n# If none of the encodings work, you may need to investigate the file further or consult its documentation.\n","metadata":{"execution":{"iopub.status.busy":"2024-05-16T01:05:21.292669Z","iopub.execute_input":"2024-05-16T01:05:21.293291Z","iopub.status.idle":"2024-05-16T01:05:21.317939Z","shell.execute_reply.started":"2024-05-16T01:05:21.293255Z","shell.execute_reply":"2024-05-16T01:05:21.316777Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Successfully read the file using encoding: utf-8\n","output_type":"stream"}]},{"cell_type":"code","source":"informations_households_df.sample(15)","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:19:52.303279Z","iopub.execute_input":"2024-05-10T17:19:52.303653Z","iopub.status.idle":"2024-05-10T17:19:52.31714Z","shell.execute_reply.started":"2024-05-10T17:19:52.303626Z","shell.execute_reply":"2024-05-10T17:19:52.316039Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"informations_households_df.drop(['Acorn_grouped','file'], axis=1, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:19:56.777308Z","iopub.execute_input":"2024-05-10T17:19:56.77772Z","iopub.status.idle":"2024-05-10T17:19:56.784718Z","shell.execute_reply.started":"2024-05-10T17:19:56.77769Z","shell.execute_reply":"2024-05-10T17:19:56.783472Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Assuming 'LCLid' is the common column name in both DataFrames\nmerged_df = pd.merge(informations_households_df, daily_df, on='LCLid', how='inner')\n","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:19:59.378575Z","iopub.execute_input":"2024-05-10T17:19:59.378974Z","iopub.status.idle":"2024-05-10T17:20:00.571391Z","shell.execute_reply.started":"2024-05-10T17:19:59.378943Z","shell.execute_reply":"2024-05-10T17:20:00.570141Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"merged_df","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:20:05.541242Z","iopub.execute_input":"2024-05-10T17:20:05.541657Z","iopub.status.idle":"2024-05-10T17:20:05.561591Z","shell.execute_reply.started":"2024-05-10T17:20:05.541626Z","shell.execute_reply":"2024-05-10T17:20:05.560451Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define the path where you want to save the CSV file on your local device\nlocal_file_path = r'C:\\Users\\Lenovo\\Downloads\\half_hours_consumption.csv'\n\n# Save the DataFrame as a CSV file in the specified path\nhalf_hours_consumption.to_csv(local_file_path, index=False)\n\nprint(\"CSV file saved successfully. You can download it from the following location:\")\nprint(local_file_path)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"weather_daily_df = pd.read_csv(\"/kaggle/input/smart-meters-in-london/weather_daily_darksky.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:20:08.529639Z","iopub.execute_input":"2024-05-10T17:20:08.53002Z","iopub.status.idle":"2024-05-10T17:20:08.553288Z","shell.execute_reply.started":"2024-05-10T17:20:08.52999Z","shell.execute_reply":"2024-05-10T17:20:08.552477Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"weather_daily_df","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:20:10.223871Z","iopub.execute_input":"2024-05-10T17:20:10.224492Z","iopub.status.idle":"2024-05-10T17:20:10.256085Z","shell.execute_reply.started":"2024-05-10T17:20:10.224441Z","shell.execute_reply":"2024-05-10T17:20:10.254811Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"weather_hourly_df = pd.read_csv(\"/kaggle/input/smart-meters-in-london/weather_hourly_darksky.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:20:12.772026Z","iopub.execute_input":"2024-05-10T17:20:12.772678Z","iopub.status.idle":"2024-05-10T17:20:12.836261Z","shell.execute_reply.started":"2024-05-10T17:20:12.772643Z","shell.execute_reply":"2024-05-10T17:20:12.835143Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"weather_hourly_df","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:20:16.01302Z","iopub.execute_input":"2024-05-10T17:20:16.013998Z","iopub.status.idle":"2024-05-10T17:20:16.034415Z","shell.execute_reply.started":"2024-05-10T17:20:16.013962Z","shell.execute_reply":"2024-05-10T17:20:16.033665Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport pandas as pd\n\n# Directory containing the files\ndirectory = '/kaggle/input/smart-meters-in-london/hhblock_dataset/hhblock_dataset'\n\n# List all files in the directory\nfiles = os.listdir(directory)\n\n# Initialize an empty list to store DataFrames\ndfs = []\n\n# Read each file into a DataFrame and append to dfs list\nfor file in files:\n    file_path = os.path.join(directory, file)\n    df = pd.read_csv(file_path)\n    dfs.append(df)\n\n# Concatenate all DataFrames into one\nhalf_hours_consumption = pd.concat(dfs, ignore_index=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-16T01:04:30.946385Z","iopub.execute_input":"2024-05-16T01:04:30.947632Z","iopub.status.idle":"2024-05-16T01:05:21.287612Z","shell.execute_reply.started":"2024-05-16T01:04:30.947594Z","shell.execute_reply":"2024-05-16T01:05:21.286476Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"merged_df = pd.merge(informations_households_df, half_hours_consumption, on='LCLid', how='inner')\n","metadata":{"execution":{"iopub.status.busy":"2024-05-16T01:05:33.709423Z","iopub.execute_input":"2024-05-16T01:05:33.709807Z","iopub.status.idle":"2024-05-16T01:05:37.144576Z","shell.execute_reply.started":"2024-05-16T01:05:33.70978Z","shell.execute_reply":"2024-05-16T01:05:37.143546Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"# Define the path where you want to save the CSV file on your local device\nlocal_file_path = r'merged.csv'\n\n# Save the DataFrame as a CSV file in the specified path\nhalf_hours_consumption.to_csv(local_file_path, index=False)\n\nprint(\"CSV file saved successfully. You can download it from the following location:\")\nprint(local_file_path)","metadata":{"execution":{"iopub.status.busy":"2024-05-16T01:05:37.784904Z","iopub.execute_input":"2024-05-16T01:05:37.785321Z","iopub.status.idle":"2024-05-16T01:09:18.869235Z","shell.execute_reply.started":"2024-05-16T01:05:37.78529Z","shell.execute_reply":"2024-05-16T01:09:18.866239Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"CSV file saved successfully. You can download it from the following location:\nmerged.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"from kaggle.api.kaggle_api_extended import KaggleApi\n\n# Initialize Kaggle API\napi = KaggleApi()\n\ndataset_path = 'abdelrhmansalah1/merged.csv'\napi.dataset_download_files(dataset_path, path='./downloads', unzip=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-16T01:15:29.874747Z","iopub.execute_input":"2024-05-16T01:15:29.876197Z","iopub.status.idle":"2024-05-16T01:15:30.78365Z","shell.execute_reply.started":"2024-05-16T01:15:29.876145Z","shell.execute_reply":"2024-05-16T01:15:30.782009Z"},"trusted":true},"execution_count":7,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)","Cell \u001b[0;32mIn[7], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mkaggle\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mapi\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkaggle_api_extended\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m KaggleApi\n\u001b[1;32m      3\u001b[0m \u001b[38;5;66;03m# Initialize Kaggle API\u001b[39;00m\n\u001b[1;32m      4\u001b[0m api \u001b[38;5;241m=\u001b[39m KaggleApi()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/kaggle/__init__.py:7\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mkaggle\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mapi_client\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m ApiClient\n\u001b[1;32m      6\u001b[0m api \u001b[38;5;241m=\u001b[39m KaggleApi(ApiClient())\n\u001b[0;32m----> 7\u001b[0m \u001b[43mapi\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mauthenticate\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/kaggle/api/kaggle_api_extended.py:398\u001b[0m, in \u001b[0;36mKaggleApi.authenticate\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    396\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m\n\u001b[1;32m    397\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 398\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mIOError\u001b[39;00m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mCould not find \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m. Make sure it\u001b[39m\u001b[38;5;130;01m\\'\u001b[39;00m\u001b[38;5;124ms located in\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m    399\u001b[0m                       \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m. Or use the environment method.\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;241m.\u001b[39mformat(\n\u001b[1;32m    400\u001b[0m                           \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconfig_file, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconfig_dir))\n\u001b[1;32m    402\u001b[0m \u001b[38;5;66;03m# Step 3: load into configuration!\u001b[39;00m\n\u001b[1;32m    403\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_load_config(config_data)\n","\u001b[0;31mOSError\u001b[0m: Could not find kaggle.json. Make sure it's located in /root/.kaggle. Or use the environment method."],"ename":"OSError","evalue":"Could not find kaggle.json. Make sure it's located in /root/.kaggle. Or use the environment method.","output_type":"error"}]},{"cell_type":"markdown","source":"# for example\n**hh_0 = 0.114 (KWH/hh)**","metadata":{}},{"cell_type":"code","source":"# Define the path where you want to save the CSV file on your local device\nlocal_file_path = r'C:\\Users\\Lenovo\\Downloads\\half_hours_consumption.csv'\n\n# Save the DataFrame as a CSV file in the specified path\nhalf_hours_consumption.to_csv(local_file_path, index=False)\n\nprint(\"CSV file saved successfully. You can download it from the following location:\")\nprint(local_file_path)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-15T22:24:15.172521Z","iopub.execute_input":"2024-05-15T22:24:15.173311Z","iopub.status.idle":"2024-05-15T22:24:15.526293Z","shell.execute_reply.started":"2024-05-15T22:24:15.173269Z","shell.execute_reply":"2024-05-15T22:24:15.524314Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"C:\\Users\\Lenovo\\Downloads","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"half_hours_consumption","metadata":{"execution":{"iopub.status.busy":"2024-05-15T21:58:38.191643Z","iopub.execute_input":"2024-05-15T21:58:38.192021Z","iopub.status.idle":"2024-05-15T21:58:39.527168Z","shell.execute_reply.started":"2024-05-15T21:58:38.191979Z","shell.execute_reply":"2024-05-15T21:58:39.525862Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n# Assuming your dataframe is named 'half_hours_consumption'\n\n# Define seasons\nwinter_months = [12, 1, 2]\nspring_months = [3, 4, 5]\nsummer_months = [6, 7, 8]\nfall_months = [9, 10, 11]\n\n# Convert 'day' column to datetime\nhalf_hours_consumption['day'] = pd.to_datetime(half_hours_consumption['day'])\n\n# Extract month from 'day' column\nhalf_hours_consumption['month'] = half_hours_consumption['day'].dt.month\n\n# Calculate total consumption for each season\nhalf_hours_consumption['winter'] = half_hours_consumption['month'].isin(winter_months)\nhalf_hours_consumption['spring'] = half_hours_consumption['month'].isin(spring_months)\nhalf_hours_consumption['summer'] = half_hours_consumption['month'].isin(summer_months)\nhalf_hours_consumption['fall'] = half_hours_consumption['month'].isin(fall_months)\n\n# Filter to keep only the consumption columns for each season\nwinter_consumption = half_hours_consumption.loc[half_hours_consumption['winter'], half_hours_consumption.filter(like='hh_').columns]\nspring_consumption = half_hours_consumption.loc[half_hours_consumption['spring'], half_hours_consumption.filter(like='hh_').columns]\nsummer_consumption = half_hours_consumption.loc[half_hours_consumption['summer'], half_hours_consumption.filter(like='hh_').columns]\nfall_consumption = half_hours_consumption.loc[half_hours_consumption['fall'], half_hours_consumption.filter(like='hh_').columns]\n\n# Find the maximum hourly consumption for each season\nmax_hourly_winter = winter_consumption.max().max()\nmax_hourly_spring = spring_consumption.max().max()\nmax_hourly_summer = summer_consumption.max().max()\nmax_hourly_fall = fall_consumption.max().max()\n\n# Calculate the maximum average consumption for each season\nmax_avg_winter = winter_consumption.mean().max()\nmax_avg_spring = spring_consumption.mean().max()\nmax_avg_summer = summer_consumption.mean().max()\nmax_avg_fall = fall_consumption.mean().max()\n\n# Find the maximum overall consumption for each season\nmax_overall_winter = winter_consumption.sum(axis=1).max()\nmax_overall_spring = spring_consumption.sum(axis=1).max()\nmax_overall_summer = summer_consumption.sum(axis=1).max()\nmax_overall_fall = fall_consumption.sum(axis=1).max()\n\nprint(\"Maximum Hourly Consumption for Each Season:\")\nprint(\"Winter:\", max_hourly_winter)\nprint(\"Spring:\", max_hourly_spring)\nprint(\"Summer:\", max_hourly_summer)\nprint(\"Fall:\", max_hourly_fall)\n\nprint(\"\\nMaximum Average Consumption for Each Season:\")\nprint(\"Winter:\", max_avg_winter)\nprint(\"Spring:\", max_avg_spring)\nprint(\"Summer:\", max_avg_summer)\nprint(\"Fall:\", max_avg_fall)\n\nprint(\"\\nMaximum Overall Consumption for Each Season:\")\nprint(\"Winter:\", max_overall_winter)\nprint(\"Spring:\", max_overall_spring)\nprint(\"Summer:\", max_overall_summer)\nprint(\"Fall:\", max_overall_fall)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:21:05.048904Z","iopub.execute_input":"2024-05-10T17:21:05.049275Z","iopub.status.idle":"2024-05-10T17:21:14.266025Z","shell.execute_reply.started":"2024-05-10T17:21:05.049244Z","shell.execute_reply":"2024-05-10T17:21:14.264842Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Drop the 'month' column\nhalf_hours_consumption.drop(columns='month', inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:21:17.137469Z","iopub.execute_input":"2024-05-10T17:21:17.137829Z","iopub.status.idle":"2024-05-10T17:21:17.750871Z","shell.execute_reply.started":"2024-05-10T17:21:17.137802Z","shell.execute_reply":"2024-05-10T17:21:17.749845Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"half_hours_consumption","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:21:19.972019Z","iopub.execute_input":"2024-05-10T17:21:19.972421Z","iopub.status.idle":"2024-05-10T17:21:20.8583Z","shell.execute_reply.started":"2024-05-10T17:21:19.972361Z","shell.execute_reply":"2024-05-10T17:21:20.857184Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Assuming your dataframe is named 'half_hours_consumption'\n\n# Filter data for winter days\nwinter_days_data = half_hours_consumption[half_hours_consumption['winter']]\n\n# Filter columns based on 'winter' column\nwinter_hh_columns = winter_days_data.filter(like='hh_')\n\n# Calculate the maximum average consumption of 4 consecutive half-hour intervals\nmax_avg_consumption = winter_hh_columns.rolling(window=4, axis=1).mean().max().max()\n\n# Plotting\nplt.figure(figsize=(12, 6))\n\n# Plot the maximum average consumption\nplt.axhline(y=max_avg_consumption, color='r', linestyle='--', label=f'Max Average Consumption: {max_avg_consumption:.2f}')\n\n# Plot the consumption for each half-hour column\nfor col in winter_hh_columns.columns:\n    plt.plot(winter_hh_columns[col], label=col)\n\nplt.title('Winter Consumption')\nplt.xlabel('Half-Hour')\nplt.ylabel('Consumption')\nplt.legend(loc='upper left', bbox_to_anchor=(1,1))\nplt.grid(True)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:21:22.540632Z","iopub.execute_input":"2024-05-10T17:21:22.540993Z","iopub.status.idle":"2024-05-10T17:22:19.260136Z","shell.execute_reply.started":"2024-05-10T17:21:22.540965Z","shell.execute_reply":"2024-05-10T17:22:19.259013Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n# Assuming your dataframe is named 'half_hours_consumption'\n\n# Filter data for winter days\nwinter_days_data = half_hours_consumption[half_hours_consumption['winter']]\n\n# Filter columns based on 'winter' column\nwinter_hh_columns = winter_days_data.filter(like='hh_')\n\n# Calculate the sum of 4 consecutive half-hour intervals\nrolling_sum = winter_hh_columns.rolling(window=4, axis=1).sum()\n\n# Find the row and column indices of the maximum sum\nmax_sum_idx = rolling_sum.stack().idxmax()\n\n# Extract the column index of the maximum sum\nmax_sum_column = max_sum_idx[1]\n\n# Convert the column index to integer\nmax_sum_column_index = winter_hh_columns.columns.get_loc(max_sum_column)\n\n# Extract the starting column index of the 4 consecutive half-hour intervals\nstart_idx = max_sum_column_index - 3\n\n# Get the labels of the 4 consecutive half-hour intervals\ninterval_labels = winter_hh_columns.columns[start_idx:max_sum_column_index+1]\n\n# Translate the labels to human-readable time intervals\nstart_time = int(interval_labels[0].split('_')[1]) * 0.5\nend_time = int(interval_labels[-1].split('_')[1]) * 0.5 + 0.5\n\n# Convert start and end times to 12-hour format\nstart_time_str = str(int(start_time) % 12) + (' AM' if int(start_time) < 12 else ' PM')\nend_time_str = str(int(end_time) % 12) + (' AM' if int(end_time) < 12 else ' PM')\n\n# Print the time interval\nprint(\"Time interval with maximum sum: From\", start_time_str, \"to\", end_time_str)\n\n# Print the labels of the 4 consecutive half-hour intervals\nprint(\"Labels of 4 consecutive half-hour intervals with maximum sum:\", interval_labels)\n# Print the maximum sum\nprint(\"Maximum sum of 4 consecutive half-hour intervals:\", rolling_sum.max().max())","metadata":{"execution":{"iopub.status.busy":"2024-05-10T17:46:09.664972Z","iopub.execute_input":"2024-05-10T17:46:09.665425Z","iopub.status.idle":"2024-05-10T17:46:54.825584Z","shell.execute_reply.started":"2024-05-10T17:46:09.665395Z","shell.execute_reply":"2024-05-10T17:46:54.824494Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}